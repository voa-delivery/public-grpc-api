/* eslint-disable */
/*Generated by GenDocu.com*/
// package: public.v1
// file: orders.proto

var orders_pb = require("./orders_pb");
var google_protobuf_empty_pb = require("google-protobuf/google/protobuf/empty_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var OrdersService = (function () {
  function OrdersService() {}
  OrdersService.serviceName = "public.v1.OrdersService";
  return OrdersService;
}());

OrdersService.CreateOrder = {
  methodName: "CreateOrder",
  service: OrdersService,
  requestStream: false,
  responseStream: false,
  requestType: orders_pb.CreateOrderRequest,
  responseType: orders_pb.CreateOrderResponse
};

OrdersService.GetOrder = {
  methodName: "GetOrder",
  service: OrdersService,
  requestStream: false,
  responseStream: false,
  requestType: orders_pb.GetOrderRequest,
  responseType: orders_pb.GetOrderResponse
};

OrdersService.CancelOrder = {
  methodName: "CancelOrder",
  service: OrdersService,
  requestStream: false,
  responseStream: false,
  requestType: orders_pb.CancelOrderRequest,
  responseType: google_protobuf_empty_pb.Empty
};

exports.OrdersService = OrdersService;

function OrdersServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

OrdersServiceClient.prototype.createOrder = function createOrder(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(OrdersService.CreateOrder, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

OrdersServiceClient.prototype.getOrder = function getOrder(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(OrdersService.GetOrder, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

OrdersServiceClient.prototype.cancelOrder = function cancelOrder(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(OrdersService.CancelOrder, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.OrdersServiceClient = OrdersServiceClient;

