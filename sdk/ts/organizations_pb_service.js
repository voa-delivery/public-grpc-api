/* eslint-disable */
/*Generated by GenDocu.com*/
// package: public.v1
// file: organizations.proto

var organizations_pb = require("./organizations_pb");
var grpc = require("@improbable-eng/grpc-web").grpc;

var OrganizationsService = (function () {
  function OrganizationsService() {}
  OrganizationsService.serviceName = "public.v1.OrganizationsService";
  return OrganizationsService;
}());

OrganizationsService.GetOrganization = {
  methodName: "GetOrganization",
  service: OrganizationsService,
  requestStream: false,
  responseStream: false,
  requestType: organizations_pb.GetOrganizationRequest,
  responseType: organizations_pb.GetOrganizationResponse
};

exports.OrganizationsService = OrganizationsService;

function OrganizationsServiceClient(serviceHost, options) {
  this.serviceHost = serviceHost;
  this.options = options || {};
}

OrganizationsServiceClient.prototype.getOrganization = function getOrganization(requestMessage, metadata, callback) {
  if (arguments.length === 2) {
    callback = arguments[1];
  }
  var client = grpc.unary(OrganizationsService.GetOrganization, {
    request: requestMessage,
    host: this.serviceHost,
    metadata: metadata,
    transport: this.options.transport,
    debug: this.options.debug,
    onEnd: function (response) {
      if (callback) {
        if (response.status !== grpc.Code.OK) {
          var err = new Error(response.statusMessage);
          err.code = response.status;
          err.metadata = response.trailers;
          callback(err, null);
        } else {
          callback(null, response.message);
        }
      }
    }
  });
  return {
    cancel: function () {
      callback = null;
      client.close();
    }
  };
};

exports.OrganizationsServiceClient = OrganizationsServiceClient;

